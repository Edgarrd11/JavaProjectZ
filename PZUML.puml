@startuml
' Define classes for Models
class User {
    - int id
    - String username
    - String password
    - String role
    + User()
    + User(id: int, username: String, password: String, role: String)
    + getters/setters()
}

class Loan {
    - int id
    - int userId
    - double amountRequested
    - String loanType
    - String status
    + Loan()
    + Loan(id: int, userId: int, amountRequested: double, loanType: String, status: String)
    + getters/setters()
}

' Define classes for DTOs
class UserDTO {
    - String username
    - String password
    - String role
    + UserDTO()
    + UserDTO(username: String, password: String, role: String)
    + getters/setters()
}

class LoanDTO {
    - double amountRequested
    - String loanType
    + LoanDTO()
    + LoanDTO(amountRequested: double, loanType: String)
    + getters/setters()
}

' Define classes for Controllers
class AuthController {
    - AuthService authService
    + AuthController(authService: AuthService)
    + register(ctx: Context): void
    + login(ctx: Context): void
    + logout(ctx: Context): void
}

class UserController {
    - UserService userService
    + UserController(userService: UserService)
    + getUser(ctx: Context): void
    + updateUser(ctx: Context): void
}

class LoanController {
    - LoanService loanService
    + LoanController(loanService: LoanService)
    + createLoan(ctx: Context): void
    + getLoans(ctx: Context): void
    + approveLoan(ctx: Context): void
    + rejectLoan(ctx: Context): void
}

' Define classes for Services
class AuthService {
    - UserDAO userDAO
    + AuthService(userDAO: UserDAO)
    + register(user: User): void
    + login(username: String, password: String): void
    + logout(): void
}

class UserService {
    - UserDAO userDAO
    + UserService(userDAO: UserDAO)
    + getUser(id: int): User
    + updateUser(user: User): void
}

class LoanService {
    - LoanDAO loanDAO
    + LoanService(loanDAO: LoanDAO)
    + createLoan(loan: Loan): Loan
    + getLoans(userId: int, isManager: boolean): List<Loan>
    + approveLoan(loanId: int): void
    + rejectLoan(loanId: int): void
}

' Define classes for DAOs
class UserDAO {
    + getUserById(id: int): User
    + getUserByUsername(username: String): User
    + createUser(user: User): void
    + updateUser(user: User): void
}

class LoanDAO {
    + createLoan(loan: Loan): Loan
    + getLoansByUserId(userId: int): List<Loan>
    + getAllLoans(): List<Loan>
    + updateLoanStatus(loanId: int, status: String): void
}

' Define relationships
AuthController --> AuthService : uses
UserController --> UserService : uses
LoanController --> LoanService : uses

AuthService --> UserDAO : uses
UserService --> UserDAO : uses
LoanService --> LoanDAO : uses

AuthService --> User : uses
UserService --> User : uses
LoanService --> Loan : uses

UserDAO --> User : interacts with
LoanDAO --> Loan : interacts with

AuthController --> UserDTO : uses
UserController --> UserDTO : uses
LoanController --> LoanDTO : uses

@enduml